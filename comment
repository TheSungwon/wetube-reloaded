git init

git 생성
git url 복사
https://github.com/TheSungwon/wetube-reloaded

git remote add origin 'url'

---------command
npm init

node index.js

npm run win

--
npm i express

--
scripts --> win --> console에 npm run win

## package.json에 dependencies만 있으면 node_modules나 package-lock.json 지워도 npm install으로 재생성

npm install --save-dev @babel/core
--save-dev는 단순히 개발자에게 필요한..
package.json에는
"devDependencies": {
"@babel/core": "^7.24.6"
}
으로 나타냄

--
babel.js 를 사용하려면 babel.config.json 파일 생성 +
{
"presets": ["@babel/preset-env"]
}

추가
npm install @babel/preset-env --save-dev
설치
npm install --save-dev @babel/node

---

nodemon
npm i nodemon --save-dev
파일이 수정되면 nodemon이 알아서 서버 재시작해줌

scripts에
nodemon --exec을 추가
"dev": "nodemon --exec babel-node index.js",
--> npm run~ 을 재시작 할 필요 없음
--

-----------
npm i morgan
-> HTTP request logger middleware for node.js

---------
npm i pug
-> HTML Tag
express의 app.set으로 뷰/템플릿 엔진 pug 설정

app.set("view engine", "pug");

process.cwd() +"/views" -> cwd는 current working directory
cwd는 node.js 서버가 실행되는 위치 (package.json이 있는 위치)

express는 '/views'를 찾기때문에  'views폴더 생성 -> ~.pug'
사용하려면 res.render("~")
app.set("view engine", "pug");으로 views폴더의 pug 파일을 찾도록 설정, import 안 함

default 경로를 변경하려면
app.set("views", proess.cwd() + "/src/views")

----------
MVP style
<link rel="stylesheet" href="https://unpkg.com/mvp.css"> 


-----

mongoDB install, cmd -> mongod 커맨드 입력
1(windows 기준 ->  설치, 환경변수(Path에 mongodb bin폴더 경로 입력))
2 C:\\data\\db\\ 폴더 생성
3 mongod 커맨드 입력

mongoDB Shell install
1. zip 파일 압축 해제, bin 폴더 환경변수 등록
2. mongod
3. mongosh

npm install mongoose
1. db.js 생성


mongoose는 node.js와 monghDB를 연결.
mongoosejs.com/docs/

-----------

비밀번호 hash화 -> 일방향 함수 -> 되돌릴 수 없음
같은 입력값으로는 항상 같은 출력값이 나옴

npm i bcrypt 설치

rainbow table공격을 bcrypt가 막아줌


-------
npm i express-session

- 기본적으로 서버와 유저의 연결은 stateless한 성질을 띈다.(wifi가 쭉 연결되어 있는것과 다르게)
- 이러한 연결 특성으로 인해 매번 연결시 유저는 새로이 서버에 자신을 확인 받아야 함
- 만약 증표(증거)가 있다면 다시 연결시 유저에 대한 확인이 쉬워짐
- 쿠기가 증표 역활을 함. 유저는 서버 연결시 서버에게 증표를 건네받음(쿠키는 유저가 보관)
- 서버는 session으로 해당 증표를 가진 유저의 기록을 저장해둠
- 유저가 증표(쿠키)를 가지고 오면 서버는 저장되어 있는 session을 통해 유저를 쉽게 확인

express-session
Express용 세션 미들웨어
세션 데이터는 쿠키 자체에 저장되지 않고 세션 ID에만 저장됩니다. 세션 데이터는 서버 측에 저장됩니다.
npm i express-session
https://www.npmjs.com/package/express-session

Session 사용 예시
https://github.com/expressjs/session#example

req.session.id 또는 req.sessionID
브라우저가 request할 때 같이 보내는 session id

resave (변경 사항이 없어도 저장)
request하는 동안 세션이 수정되지 않은 경우에도 세션이 세션 저장소에 다시 저장되도록 합니다.
https://github.com/expressjs/session#resave

saveUninitialized (세션 초기화 전에도 저장)
"초기화되지 않은" 세션을 저장소에 강제로 저장합니다.
https://github.com/expressjs/session#saveuninitialized
----------

-유저를 기억하는 법 중 하나는 유저에게 쿠키를 보내는 것.
-쿠키를 이해하기 위해선 세션을 알아야 한다. 세션은 백엔드와 브라우저 간에 어떤 활동을 했는지 기억하는 것을 말한다.
-세션은 브라우저와 백엔드사이에 memory, history 같은 것이다.
-이것이 작동하려면 둘 사이에 정보가 있어야 한다.
-따라서 유저는 우리한테 어떤 정보를 남겨줘야한다. 유저가 백엔드에 뭔가 요청할 때마다 누가 요청한 것인지 알 수 있어야 한다.
-express-session 설치. 이것을 초기화 해줘야 한다.
-쿠키를 받으면 아무리 새로고침을 해도 백엔드에 value를 보내준다.
-백엔드가 보내준 알 수 없는 문자는 백엔드에서 세션 id로 사용한다.
-세션 id를 가지고 있으면 세션 object에 정보를 추가할 수 있다.
-req.session은 javascript object다. 따라서 추가할 수 있다.
--------

template PUG는 response locals에 접근할 수 있다.
# res.locals.something = "ㅁㅁㅁ" 으로 활용
pug에서는 ${something}으로 접근 할 수 있음.


--------
connect-mongo는 세션을 MongoDB에 저장
install : npm i connect-mongo

import MongoStore from "connect-mongo"
session에 store: MongoStore.create({
      mongoUrl: "mongodb://127.0.0.1:27017/wetube",
    }), 추가


-------------------
.env
gitignore에 .env 추가
.env파일은 관습적으로 대문자로 적기.
.env파일에 접근 process.env.***
npm i dotenv

dotenv는 가장 먼저 로드되어야 하므로 최상단에 선언 (init.js가 제일먼저 실행되므로 init.js에 선언)
require("dotenv").config() 로 사용하려면 dotenv를 사용하려는 
모든 파일에 추가해줘야함.
대신에 import "dotenv/config"; 로 사용해야함
